# -*- coding: utf-8 -*-
"""HW_total_analis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WcNGK2e1aryxzIofYZPPbroywMp3zKvf
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy import stats

"""
1. satisfaction_level - Уровень удовлетворенности работой (непрерывная)
2. last_evaluation - Время с момента последней оценки в годах (непрерывная)
3. number_project - Количество проектов, выполненных за время работы (дискретная/категориальная)
4. average_monthly_hours - Среднее количество часов на рабочем месте в месяц (непрерывная)
5. time_spend_company - Стаж работы в компании в годах (дискретная/категориальная)
6. work_accident - Происходили ли несчастные случаи на рабочем месте с сотрудником (категориальная)
7. left - Уволился ли сотрудник (категориальная)
8. promotion_last_5years - Повышался ли сотрудник за последние пять лет (категориальная)
9. department - Отдел, в котором работает сотрудник (категориальная)
10. salary - Относительный уровень зарплаты (категориальная)
"""

file_path = '/content/drive/My Drive/Копия HR.csv'
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.width', 2000)

df = pd.read_csv(file_path)
print(df.head())

print(df.info())

print('Уникальных значений:\n')
unique_counts = df.nunique()
print(unique_counts)

print('Преобразование в категориальные')
columns_to_convert = ['number_project', 'time_spend_company', 'Work_accident', 'left', 'promotion_last_5years', 'department', 'salary']

df[columns_to_convert] = df[columns_to_convert].apply(lambda x: x.astype('category'))

print(df.dtypes)

print('Статистика для непрерывных величин:\n')
continuous_columns = [
    'satisfaction_level',
    'last_evaluation',
    'average_montly_hours'
]
stats = df[continuous_columns].describe()
print(stats)

print('Статистика для категориальных колонок:\n')
categorical_columns = [
    'number_project',
    'time_spend_company',
    'Work_accident',
    'left',
    'promotion_last_5years',
    'department',
    'salary',
]


categorical_stats = df[categorical_columns].describe(include='category')
print(categorical_stats)

df = pd.read_csv(file_path)
print(df.info())

# Отбираем только количественные переменные
quantitative_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[quantitative_columns].corr()

# Создание маски для верхней части матрицы
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))

# Создание цветовой схемы
cmap = sns.diverging_palette(230, 20, as_cmap=True)

# Визуализация корреляционной матрицы с помощью seaborn
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, mask=mask, cmap=cmap, vmax=.3, center=0,
            square=True, linewidths=.5, cbar_kws={"shrink": .8},
            annot=True, fmt=".2f",  # Дополнение значениями корреляции
            annot_kws={"size": 10})  # Размер шрифта

plt.title('Корреляционная матрица количественных переменных')
plt.show()

"""
Две самые скоррелированные переменные:
1. average_monthly_hours - Среднее количество часов на рабочем месте в месяц к number_project - Количество проектов, выполненных за время работы
2. number_project - Количество проектов, выполненных за время работы к last_evaluation - Время с момента последней оценки в годах

Две наименее скоррелированные переменные:
1. work_accident - Происходили ли несчастные случаи на рабочем месте с сотрудником к time_spend_company - Стаж работы в компании в годах
2. work_accident - Происходили ли несчастные случаи на рабочем месте с сотрудником к number_project - Количество проектов, выполненных за время работы
"""

def count_employees_by_department(df):
    print('Работников в каждом департаменте\n')
    return df['department'].value_counts()

count_employees_by_department(df)

def plot_salary_distribution(df):
    plt.figure(figsize=(10, 6))

    # Гистограмма
    sns.histplot(df['salary'], bins=30, kde=True, color='blue', stat='density', alpha=0.6)

    # Параметры графика
    plt.title('Распределение зарплат сотрудников')
    plt.xlabel('Зарплата')
    plt.ylabel('Плотность')
    plt.grid(True)

    plt.show()

plot_salary_distribution(df)

def plot_salary_distribution_by_department(df):

    unique_departments = df['department'].unique()
    n_departments = len(unique_departments)

    # Настройка размера графиков
    plt.figure(figsize=(15, n_departments * 3))

    for i, dept in enumerate(unique_departments):
        plt.subplot(n_departments, 1, i + 1)  # Подграфик для каждого департамента

        sns.histplot(df[df['department'] == dept]['salary'], bins=30, kde=True, color='blue', stat='density', alpha=0.6)


        plt.title(f'Распределение зарплат в департаменте: {dept}')
        plt.xlabel('Зарплата')
        plt.ylabel('Плотность')
        plt.grid(True)

    plt.tight_layout()
    plt.show()

plot_salary_distribution_by_department(df)

def analyze_work_hours_with_plot(df, salary_column='salary', hours_column='average_montly_hours'):
    # Фильтрация данных по окладу
    low_salary_hours = df[df[salary_column] == 'low'][hours_column]
    high_salary_hours = df[df[salary_column] == 'high'][hours_column]

    # Проводим t-тест
    t_statistic, p_value = stats.ttest_ind(high_salary_hours.dropna(), low_salary_hours.dropna())

    # Уровень значимости
    alpha = 0.05

    # Интерпретация результатов
    print(f"T-статистика: {t_statistic}, p-значение: {p_value}")

    if p_value < alpha:
        print("Отвергаем нулевую гипотезу: Сотрудники с высоким окладом действительно проводят на работе больше времени, чем сотрудники с низким окладом.")
    else:
        print("Нет оснований отвергать нулевую гипотезу: Нет статистически значимой разницы во времени, проведенном на работе сотрудниками с высоким и низким окладом.")

    # Строим график
    plt.figure(figsize=(10, 6))
    plt.boxplot([low_salary_hours.dropna(), high_salary_hours.dropna()], labels=['Low Salary', 'High Salary'])
    plt.title('Распределение часов работы в месяц по окладу')
    plt.ylabel('Средние месячные часы работы')
    plt.grid(axis='y')
    plt.show()


analyze_work_hours_with_plot(df)